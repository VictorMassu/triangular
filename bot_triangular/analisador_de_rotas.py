import json
import os
from bot_triangular.utils.logs import log_info
from itertools import permutations

MOEDA_BASE = "USDC"
VALOR_INICIAL = 100  # valor inicial por opera√ß√£o
LUCRO_MINIMO = 0.1 / 100  # lucro m√≠nimo desejado (0.1%)

# Caminho do arquivo de banco de dados
PARES_DB_PATH = 'pares_validos.json'

def carregar_pares_db():
    """
    Carrega os pares v√°lidos e n√£o v√°lidos do arquivo JSON.
    """
    if os.path.exists(PARES_DB_PATH):
        with open(PARES_DB_PATH, 'r') as file:
            db = json.load(file)
            # Garantindo que pares_validos e pares_invalidos sejam sets
            return {'validos': set(db.get('validos', [])), 'invalidos': set(db.get('invalidos', []))}
    return {'validos': set(), 'invalidos': set()}

def salvar_pares_db(pares_validos, pares_invalidos):
    """
    Salva os pares v√°lidos e n√£o v√°lidos no arquivo JSON.
    """
    with open(PARES_DB_PATH, 'w') as file:
        json.dump({'validos': list(pares_validos), 'invalidos': list(pares_invalidos)}, file, indent=4)
    log_info(f"üîé Banco de dados de pares atualizado: {len(pares_validos)} pares v√°lidos, {len(pares_invalidos)} pares inv√°lidos.")

def validar_par_cache(par, pares_validos, pares_invalidos):
    """
    Verifica se o par j√° foi validado previamente.
    """
    if par in pares_validos:
        return True
    if par in pares_invalidos:
        return False
    return None  # Significa que o par precisa ser validado

def gerar_rotas_triangulares(pares_disponiveis):
    moedas = set()
    for par in pares_disponiveis:
        moedas.add(par['baseAsset'])
        moedas.add(par['quoteAsset'])

    rotas = []
    # Gerando permuta√ß√µes de 3 moedas, onde USDC pode ser qualquer uma das 3
    for combinacao in permutations(moedas, 3):
        if MOEDA_BASE in combinacao:
            rota = list(combinacao)  # A rota pode ter qualquer moeda como final
            rotas.append(rota)

    return rotas

def validar_rotas_existentes(exchange, rotas, pares_validos, pares_invalidos):
    """
    Verifica se os pares das rotas s√£o v√°lidos com base no banco de dados.
    """
    nomes_pares = {par['symbol'] for par in exchange.get_pares()}
    rotas_validas = []

    for rota in rotas:
        par1 = rota[0] + rota[1]
        par2 = rota[1] + rota[2]

        # Invertidos para verificar os pares na ordem inversa
        invertido1 = rota[1] + rota[0]
        invertido2 = rota[2] + rota[1]

        # Verifica se o par existe no banco de dados ou se j√° foi validado
        if validar_par_cache(par1, pares_validos, pares_invalidos) and \
           validar_par_cache(par2, pares_validos, pares_invalidos):
            rotas_validas.append(rota)
        else:
            # Marca como inv√°lido caso o par n√£o seja encontrado
            if par1 not in pares_validos and par1 not in pares_invalidos:
                pares_invalidos.add(par1)
            if par2 not in pares_validos and par2 not in pares_invalidos:
                pares_invalidos.add(par2)

    log_info(f"üîé Total de rotas triangulares v√°lidas: {len(rotas_validas)}")
    return rotas_validas

def simular_oportunidade(exchange, rota):
    valor_atual = VALOR_INICIAL
    log_info(f"üîÑ Iniciando simula√ß√£o da oportunidade: {rota}")

    for i in range(len(rota) - 1):
        par = rota[i] + rota[i + 1]
        saldo = valor_atual

        # Obter o pre√ßo de compra e venda
        preco_compra, preco_venda = exchange.get_precos(par)
        if preco_compra is None or preco_venda is None:
            log_info(f"‚ùå N√£o foi poss√≠vel obter pre√ßos para {par}. Pulando esta rota.")
            return 0

        # Realizar a troca de moeda
        quantidade = saldo / preco_compra
        valor_atual = quantidade * preco_venda

        log_info(f"üí± {rota[i]} ‚Üí {rota[i + 1]} via {par} @ {preco_compra}/{preco_venda} ‚Üí Novo saldo: {valor_atual} USDC")

    return valor_atual

def analisar_oportunidades(exchange):
    saldo = exchange.consultar_saldo(MOEDA_BASE)
    if saldo < VALOR_INICIAL:
        log_info(f"‚ö†Ô∏è Saldo insuficiente em {MOEDA_BASE}: {saldo}")
        return

    log_info("üîé Carregando banco de dados de pares...")
    pares_validos, pares_invalidos = carregar_pares_db()

    log_info("üîé Gerando combina√ß√µes de rotas triangulares...")
    pares_disponiveis = exchange.get_pares()
    rotas = gerar_rotas_triangulares(pares_disponiveis)
    rotas_validas = validar_rotas_existentes(exchange, rotas, pares_validos, pares_invalidos)

    log_info(f"üîÅ {len(rotas_validas)} rotas triangulares v√°lidas encontradas.")
    for rota in rotas_validas:
        valor_final = simular_oportunidade(exchange, rota)
        lucro_percentual = (valor_final - VALOR_INICIAL) / VALOR_INICIAL * 100

        # Verificar se o lucro est√° acima do m√≠nimo
        if lucro_percentual >= (LUCRO_MINIMO * 100):
            log_info(f"‚úÖ Lucro de {lucro_percentual:.4f}% acima do m√≠nimo ({LUCRO_MINIMO * 100}%) ‚Äî EXECUTANDO üí•")
            # Aqui voc√™ pode adicionar a l√≥gica para executar a opera√ß√£o real (compra e venda)
        else:
            log_info(f"‚ö†Ô∏è Lucro de {lucro_percentual:.4f}% abaixo do m√≠nimo ({LUCRO_MINIMO * 100}%) ‚Äî ignorado.")
    
    # Salva os pares v√°lidos e inv√°lidos no banco de dados
    salvar_pares_db(pares_validos, pares_invalidos)
